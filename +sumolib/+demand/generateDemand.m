%% generateDemand Generates vehicle demand in a SUMO-readable format.
%	generateDemand(netFile, flowProfiles, beginTime, endTime, outputFilePrefixPath)
%	Generates vehicle demand for a SUMO network. netFile is a string
%	specifying the path where the network file is located. flowProfiles is
%	a cell array containing objects of the sumolib.demand.FlowProfiles
%	class. The demand is generated by uniformly distributing the elements
%	of the profile property of the flowProfiles objects along the interval
%	defined by beginTime and endTime. The trips, routes, and turning ratios
%	files are generated in the path specified by the string
%	outputFilePrefixPath, which also specifies the prefix with which the
%	files are saved. It is important that the netFile and the outputs are
%	in the same folder.

%   Copyright 2014 Universidad Nacional de Colombia,
%   Politecnico Jaime Isaza Cadavid.
%   Authors: Andres Acosta, Jairo Espinosa, Jorge Espinosa.
%	$Id$

function generateDemand(netFile, flowProfiles, beginTime, endTime, outputFilePrefixPath)

% Flow Generation
numIntervals = length(flowProfiles{1}.profile);
time = linspace(beginTime,endTime, numIntervals + 1);
timeStep = range(time)/numIntervals;
flowsFile = [outputFilePrefixPath '.trips.xml'];
turnsFile = [outputFilePrefixPath '.turns.xml'];
routesFile = [outputFilePrefixPath '.rou.xml'];


fileID = fopen(flowsFile,'w');
fprintf(fileID,'<flows>\n');

cumulativeVehicle = 0;
for i=2:length(time)-1
	for j=1:length(flowProfiles)
		numVehicles = flowProfiles{j}.profile(i)*timeStep/3600;
		if numVehicles < 0
			continue
		end
		cumulativeVehicle = cumulativeVehicle + mod(numVehicles,1);
		numVehicles = floor(numVehicles);
		flowID = [flowProfiles{j}.fromEdge num2str(i-1)];
		if cumulativeVehicle >= 1
			fprintf(fileID,'\t<flow id="%s" from="%s" begin="%d" end="%d" number="%d"/>\n',...
				flowID,flowProfiles{j}.fromEdge,time(i-1),time(i),numVehicles + 1);
			cumulativeVehicle = cumulativeVehicle - 1;
		else
			if numVehicles > 0
				fprintf(fileID,'\t<flow id="%s" from="%s" begin="%d" end="%d" number="%d"/>\n',...
					flowID,flowProfiles{j}.fromEdge,time(i-1),time(i),numVehicles);
			end
		end
	end
end
fprintf(fileID,'</flows>');
fclose(fileID);


% Turning rations generation

fileID = fopen(turnsFile,'w');
fprintf(fileID,'<turns>\n\t<interval begin="%s" end="%s">\n',num2str(beginTime), num2str(endTime));

for i=1:length(flowProfiles)
	flowProfile = flowProfiles{i};
	outgoingEdges = flowProfile.turningRatio.keys;
	fprintf(fileID,'\t\t<fromEdge id="%s">\n',flowProfiles{i}.fromEdge);
	for j=1:length(flowProfiles{i}.turningRatio)
		fprintf(fileID,'\t\t\t<toEdge id="%s" probability="%s"/>\n',outgoingEdges{j},num2str(flowProfile.turningRatio(outgoingEdges{j})));
	end
	fprintf(fileID,'\t\t</fromEdge>\n');
end

fprintf(fileID,'\t</interval>\n</turns>');
fclose(fileID);

system(['jtrrouter --net-file ' netFile ' --flow-files ' flowsFile ' --turn-ratio-files ' turnsFile ' --output-file ' routesFile ' --ignore-errors' ' --departlane free']);