%% generateDemandByTurns Generates vehicle demand in a SUMO-readable format.
%	generateDemand(netFile, flowProfiles, beginTime, endTime, outputFilePrefixPath)
%	Generates vehicle demand for a SUMO network. netFile is a string
%	specifying the path where the network file is located. flowProfiles is
%	a cell array containing objects of the sumolib.demand.FlowProfiles
%	class. The demand is generated by uniformly distributing the elements
%	of the profile property of the flowProfiles objects along the interval
%	defined by beginTime and endTime. The trips, routes, and turning ratios
%	files are generated in the path specified by the string
%	outputFilePrefixPath, which also specifies the prefix with which the
%	files are saved. It is important that the netFile and the outputs are
%	in the same folder.

%   Copyright 2015 Universidad Nacional de Colombia,
%   Politecnico Jaime Isaza Cadavid.
%   Authors: Andres Acosta, Jairo Espinosa, Jorge Espinosa.
%	$Id$

function generateDemandByTurns(netFile, flows, beginTime, endTime,...
    turns, outputFilePrefixPath)

% Flow Generation
numIntervals = length(flows{1}.demand);
time = linspace(beginTime,endTime, numIntervals + 1);
% timeStep = range(time)/numIntervals;
flowsFile = [outputFilePrefixPath '.trips.xml'];
turnsFile = [outputFilePrefixPath '.turns.xml'];
routesFile = [outputFilePrefixPath '.rou.xml'];


fileID = fopen(flowsFile,'w');
fprintf(fileID,'<flows>\n');

vTypes = [];

% Disable warnings related to objett-to-struct conversion
warning('off', 'MATLAB:structOnObject');

% Generate vehicle types
for i = 1:length(flows)
    if ~ismember(flows{i}.type.id, vTypes);
        vTypes = [vTypes {flows{i}.type.id}];
        typeStruct = struct(flows{i}.type);
        typeStructFields = fieldnames(typeStruct);
        fprintf(fileID,'\t<vType');
        for j = 1:numel(typeStructFields)
            if ~isempty(typeStruct.(char(typeStructFields(j))))
                fprintf(fileID,' %s="%s"', char(typeStructFields(j)),...
                    typeStruct.(char(typeStructFields(j))));
            end
        end
        fprintf(fileID,'/>\n');
    end
end

for i=2:length(time)
	for j=1:length(flows)
% 		numVehicles = flowProfiles{j}.profile(i)*timeStep/3600;
% 		if numVehicles < 0
% 			continue
% 		end
% 		cumulativeVehicle = cumulativeVehicle + mod(numVehicles,1);
% 		numVehicles = floor(numVehicles);
        
        departLaneStr = ['_' num2str(flows{j}.departLane)];
        if strcmp(departLaneStr, '_')
            departLaneStr = '';
        end

        flowID = [flows{j}.from num2str(i-1) departLaneStr];
% 		if cumulativeVehicle >= 1
% 			fprintf(fileID,'\t<flow id="%s" from="%s" begin="%d" end="%d" number="%d" departLane="%d"/>\n',...
% 				flowID,flowProfiles{j}.fromEdge,time(i-1),time(i),numVehicles + 1,flowProfiles{j}.fromLane);
% 			cumulativeVehicle = cumulativeVehicle - 1;
% 		else
% 			if numVehicles > 0
% 				fprintf(fileID,'\t<flow id="%s" from="%s" begin="%d" end="%d" number="%d" departLane="%d"/>\n',...
% 					flowID,flowProfiles{j}.fromEdge,time(i-1),time(i),numVehicles,flowProfiles{j}.fromLane);
% 			end
% 		end

        flowStruct = struct(flows{j});
        flowStructFields = fieldnames(flowStruct);
        fprintf(fileID,'\t<flow id="%s" begin="%d" end="%d"',flowID,...
            time(i-1), time(i));
        for k = 1:numel(flowStructFields)
            if ~isempty(flowStruct.(char(flowStructFields(k))))
                if strcmp(flowStructFields(k), 'demandType')
                    fprintf(fileID,' %s=',...
                        flowStruct.(char(flowStructFields(k))));
                elseif strcmp(flowStructFields(k), 'demand')
                    demandArray = flowStruct.(char(flowStructFields(k)));
                    fprintf(fileID,'"%d"', demandArray(i-1));
                elseif strcmp(flowStructFields(k), 'number')
                    NumberArray = flowStruct.(char(flowStructFields(k)));
                    fprintf(fileID,' %s="%d"', char(flowStructFields(k)),...
                        NumberArray(i-1));
                elseif strcmp(flowStructFields(k), 'type')
                    flowVehType = flowStruct.(char(flowStructFields(k)));
                    fprintf(fileID,' %s="%s"', char(flowStructFields(k)),...
                        flowVehType.id);
                else
                    fprintf(fileID,' %s="%s"', char(flowStructFields(k)),...
                        flowStruct.(char(flowStructFields(k))));
                end
            end
        end
        fprintf(fileID,'/>\n');

	end
end
fprintf(fileID,'</flows>');
fclose(fileID);

% Turning ratios generation
fileID = fopen(turnsFile,'w');
fprintf(fileID,'<turns>\n\t<interval begin="%d" end="%d">\n',beginTime,...
    endTime);

for i=1:length(turns)
	fprintf(fileID,'\t\t<fromEdge id="%s">\n', turns{i}.fromEdge);
	for j=1:length(turns{i}.toEdges)
		fprintf(fileID,'\t\t\t<toEdge id="%s" probability="%d"/>\n',...
            turns{i}.toEdges{j},turns{i}.probabilities{j});
	end
	fprintf(fileID,'\t\t</fromEdge>\n');
end

fprintf(fileID,'\t</interval>\n</turns>');
fclose(fileID);

system(['jtrrouter --net-file ' netFile ' --flow-files ' flowsFile ' --turn-ratio-files ' turnsFile ' --output-file ' routesFile ' --ignore-errors' ' -v']);